{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"-- DUContainerMonitor v2.0.0\n--\n-- Monitors the contents of up to 6 containers and displays their status on a screen.\n-- This requires one Programming Board, one screen, and one to six containers.\n-- Each container may contain only one type of element.\n-- Edit the script parameters to set the appropriate values.\n-- The IDs of the screen and containers can be determined in build mode.\n-- The names of the containers should reflect their contents.\n-- The unit mass and volume is specific to each element and should be in kg and L respectively.\n-- The max volume of the container may vary based on the skills of the person that placed it.\n--\nVERSION = \"2.0.0\"\n\nlocal TITLE = \"T1 Material Status\"                --export: Title got the screen (in quotes)\nlocal UNITS = 4                  --export: Use 0 for #, 1 for T, 2 for KL or 3 for L, 4 for auto kL/L\nlocal SCREEN_ID = 32            --export: ID of screen\n\nlocal CONT_1_ID = 18            --export: ID of container\nlocal CONT_1_NAME = \"Hydrogen\"          --export: Name of items in container (in quotes)\nlocal CONT_1_UNIT_MASS = 1       --export: Unit mass of items in container (kg)\nlocal CONT_1_UNIT_VOLUME = 1     --export: Unit volume of items in container (L)\nlocal CONT_1_MAX_VOLUME = 179200      --export: Maximum volume allowed in container (L). Skill dependent, update as needed\n\nlocal CONT_2_ID = 19            --export: ID of container\nlocal CONT_2_NAME = \"Oxygen\"          --export: Name of items in container (in quotes)\nlocal CONT_2_UNIT_MASS = 1       --export: Unit mass of items in container (kg)\nlocal CONT_2_UNIT_VOLUME = 1     --export: Unit volume of items in container (L)\nlocal CONT_2_MAX_VOLUME = 179200      --export: Maximum volume allowed in container (L). Skill dependent, update as needed\n\nlocal CONT_3_ID = 2            --export: ID of container\nlocal CONT_3_NAME = \"Aluminum\"          --export: Name of items in container (in quotes)\nlocal CONT_3_UNIT_MASS = 2.7       --export: Unit mass of items in container (kg)\nlocal CONT_3_UNIT_VOLUME = 1     --export: Unit volume of items in container (L)\nlocal CONT_3_MAX_VOLUME = 179200      --export: Maximum volume allowed in container (L). Skill dependent, update as needed\n\nlocal CONT_4_ID = 9            --export: ID of container\nlocal CONT_4_NAME = \"Carbon\"          --export: Name of items in container (in quotes)\nlocal CONT_4_UNIT_MASS = 1       --export: Unit mass of items in container (kg)\nlocal CONT_4_UNIT_VOLUME = 1     --export: Unit volume of items in container (L)\nlocal CONT_4_MAX_VOLUME = 179200      --export: Maximum volume allowed in container (L). Skill dependent, update as needed\n\nlocal CONT_5_ID = 7            --export: ID of container\nlocal CONT_5_NAME = \"Iron\"          --export: Name of items in container (in quotes)\nlocal CONT_5_UNIT_MASS = 1       --export: Unit mass of items in container (kg)\nlocal CONT_5_UNIT_VOLUME = 1     --export: Unit volume of items in container (L)\nlocal CONT_5_MAX_VOLUME = 179200      --export: Maximum volume allowed in container (L). Skill dependent, update as needed\n\nlocal CONT_6_ID = 8            --export: ID of container\nlocal CONT_6_NAME = \"Silicon\"          --export: Name of items in container (in quotes)\nlocal CONT_6_UNIT_MASS = 1       --export: Unit mass of items in container (kg)\nlocal CONT_6_UNIT_VOLUME = 1     --export: Unit volume of items in container (L)\nlocal CONT_6_MAX_VOLUME = 179200      --export: Maximum volume allowed in container (L). Skill dependent, update as needed\n\nlocal STATUS_FONT_SIZE = 4           --export: Status text font size in vw\nlocal STATUS_1_TEXT    = \"Good\"      --export: Status text for level 1 (in quotes)\nlocal STATUS_1_COLOR   = \"#008000\"   --export: Color for status text level 1 (in quotes)\nlocal STATUS_1_LIMIT   = 50          --export: Between 100% and this value will show status text 1\n\nlocal STATUS_2_TEXT    = \"Low\"       --export: Status text for level 2 (in quotes)\nlocal STATUS_2_COLOR   = \"#FFFF00\"   --export: Color for status text level 2 (in quotes)\nlocal STATUS_2_LIMIT   = 35          --export: Between status 1 limit and this value will show status text 2\n\nlocal STATUS_3_TEXT    = \"Very Low\"  --export: Status text for level 3 (in quotes)\nlocal STATUS_3_COLOR   = \"#FF4500\"   --export: Color for status text level 3 (in quotes)\nlocal STATUS_3_LIMIT   = 15          --export: Between status 2 limit and this value will show status text 3\n\nlocal STATUS_4_TEXT    = \"Critical\"  --export: Status text for level 4 (in quotes)\nlocal STATUS_4_COLOR   = \"#FF0000\"   --export: Color for status text level 4 (in quotes)\n\nlocal AUTO_LITERS = 10000\n\nlocal CONT_IDS = {CONT_1_ID,CONT_2_ID,CONT_3_ID,CONT_4_ID,CONT_5_ID,CONT_6_ID}\nlocal CONT_MAX_VOLUMES = {CONT_1_MAX_VOLUME,CONT_2_MAX_VOLUME,CONT_3_MAX_VOLUME,CONT_4_MAX_VOLUME,CONT_5_MAX_VOLUME,CONT_6_MAX_VOLUME}\nlocal CONT_UNIT_MASSES = {CONT_1_UNIT_MASS,CONT_2_UNIT_MASS,CONT_3_UNIT_MASS,CONT_4_UNIT_MASS,CONT_5_UNIT_MASS,CONT_6_UNIT_MASS}\nlocal CONT_UNIT_VOLUMES = {CONT_1_UNIT_VOLUME,CONT_2_UNIT_VOLUME,CONT_3_UNIT_VOLUME,CONT_4_UNIT_VOLUME,CONT_5_UNIT_VOLUME,CONT_6_UNIT_VOLUME}\n\nlocal STATUS_TEXT  = {STATUS_1_TEXT, STATUS_2_TEXT, STATUS_3_TEXT, STATUS_4_TEXT}\nlocal STATUS_COLOR = {STATUS_1_COLOR, STATUS_2_COLOR, STATUS_3_COLOR, STATUS_4_COLOR}\nlocal STATUS_LIMIT = {100, STATUS_1_LIMIT, STATUS_2_LIMIT, STATUS_3_LIMIT, 0}\n\nCONT_NAMES = {}\nCONT_MASSES = {}\nCONT_VOLUMES = {}\n\n-- Generate the HTML for the status of a container based on percent fill.\nfunction getContainerStatus(percent)\n    for i = 1, #STATUS_LIMIT-1 do\n        if percent <= STATUS_LIMIT[i] and percent >= STATUS_LIMIT[i+1] then\n            return '<td class=\"tablerow status'..i..'\">'..STATUS_TEXT[i]..'</td>'\n        end\n    end\n    if percent > 100 then\n        return '<td class=\"tablerow status1\">'..STATUS_TEXT[1]..'</td>'\n    else\n        local value = #STATUS_LIMIT-1\n        return '<td class=\"tablerow status'..value..'\">'..STATUS_TEXT[value]..'</td>'\n    end\nend\n\n-- Generate the HTML for a particular container corresponding to a row on the screen.\nfunction getContainerStatusRow(i, id)\n    debug(\"getContainerStatusRow(\"..i..\", \"..id..\")\")\n    local unit_name = CONT_NAMES[id]\n    debug(\"unit_name: \"..toStr(unit_name))\n    local unit_mass = CONT_UNIT_MASSES[i]\n    debug(\"unit_mass: \"..toStr(unit_mass))\n    local unit_volume = CONT_UNIT_VOLUMES[i]\n    debug(\"unit_volume: \"..toStr(unit_volume))\n    local unit_density = unit_mass / unit_volume\n    debug(\"unit_density: \"..toStr(unit_density))\n    local max_volume = CONT_MAX_VOLUMES[i]\n    debug(\"max_volume: \"..toStr(max_volume))\n    local total_mass = CONT_MASSES[id]\n    debug(\"total_mass: \"..toStr(total_mass))\n    local total_volume = CONT_VOLUMES[id]\n    debug(\"total_volume: \"..toStr(total_volume))\n    local total_units = round(total_volume / unit_volume, 0)\n    local max_units = round(max_volume / unit_volume, 0)\n\n    local total = 0\n    local total_suffix = \"\"\n    local percent = 0\n    if UNITS == 0 then\n        total = total_units\n        percent = math.ceil((total / max_units) * 100)\n    elseif UNITS == 1 then\n        total = round(total_mass / 1000, 2)\n        percent = math.ceil((total / (max_volume * unit_density)) * 100)\n        total_suffix = \"T\"\n    elseif UNITS == 2 or (UNITS == 4 and total_volume >= AUTO_LITERS) then\n        total = round(total_volume / 1000, 2)\n        percent = math.ceil((total / (max_volume / 1000)) * 100)\n        total_suffix = \"KL\"\n    else\n        total = total_volume\n        percent = math.ceil((total / max_volume) * 100)\n        total_suffix = \"L\"\n    end\n    local status = getContainerStatus(percent)\n    return [[\n        <tr>\n            <td class=\"tablerow\">]] ..\n                unit_name:sub(1, 1):upper() ..\n                unit_name:sub(2):lower() ..\n                [[</td>\n            <td class=\"tablerow\">]] ..\n                total ..\n                total_suffix ..\n            [[</td>\n            <td class=\"tablerow\">]] ..\n                percent ..\n            [[%</td>]] ..\n                status .. [[\n        </tr>\n    ]]\nend\n\n-- Generate the HTML for all attached containers.\nfunction getAllContainerStatusRows()\n    debug(\"getAllContainerStatusRows()\")\n    local status_rows_html = \"\"\n    for i, id in pairs(CONT_IDS) do\n        if id then\n            local r = getContainerStatusRow(i, id)\n            status_rows_html = status_rows_html .. r\n        end\n    end\n    return status_rows_html\nend\n\n-- Generate the HTML for the screen display.\nfunction updateScreen()\n    debug(\"updateScreen()\")\n    local status_rows_html = getAllContainerStatusRows()\n    local html = [[\n<style>\n.title {\nfont-size: 8.5vw;\ntext-align: center;\nfont-family: \"Consolas\";\nfont-weight: 900;\nmargin-top: 3vw;\n}\n.table {\nfont-family: \"Consolas\";\nmargin-left: auto;\nmargin-right: auto;\nwidth: 80%;\nfont-size: 4vw;\n}\n.tableheader {\nfont-size: 4.7vw;\nbackground-color: blue;\ncolor: white;\n}\n.tablerow {\ntext-align: center;\nfont-weight: 900;\nfont-size: 4.7vw;\npadding: 0px;\n}\n.status1 {\nfont-size: ]]..STATUS_FONT_SIZE..[[vw;\ncolor: ]]..STATUS_1_COLOR..[[;\n}\n.status2 {\nfont-size: ]]..STATUS_FONT_SIZE..[[vw;\ncolor: ]]..STATUS_2_COLOR..[[;\n}\n.status3 {\nfont-size: ]]..STATUS_FONT_SIZE..[[vw;\ncolor: ]]..STATUS_3_COLOR..[[;\n}\n.status4 {\nfont-size: ]]..STATUS_FONT_SIZE..[[vw;\ncolor: ]]..STATUS_4_COLOR..[[;\n}\n</style>\n<div class=\"title\"> ]]..TITLE..[[\n</div>\n<table class=\"table\">\n</br>\n<tr class=\"tableheader\">\n<th>Material</th>\n<th>Qty</th>\n<th>Levels</th>\n<th>Status</th>\n]]..status_rows_html..[[\n</table>\n</div>\n]]\n\n    screenSetHTML(SCREEN_ID, html)\nend\n\n-- Hide the widget for this programming board\nunit.hide()\n\n-- Detect the elements that are linked to the programming board\nautoDetectSlots()\n\n-- Setup the container info tables\nif CONT_1_ID then\n    CONT_NAMES[CONT_1_ID] = CONT_1_NAME\n    CONT_MASSES[CONT_1_ID] = containerGetItemsMass(CONT_1_ID)\n    CONT_VOLUMES[CONT_1_ID] = containerGetItemsVolume(CONT_1_ID)\nend\nif CONT_2_ID then\n    CONT_NAMES[CONT_2_ID] = CONT_2_NAME\n    CONT_MASSES[CONT_2_ID] = containerGetItemsMass(CONT_2_ID)\n    CONT_VOLUMES[CONT_2_ID] = containerGetItemsVolume(CONT_2_ID)\nend\nif CONT_3_ID then\n    CONT_NAMES[CONT_3_ID] = CONT_3_NAME\n    CONT_MASSES[CONT_3_ID] = containerGetItemsMass(CONT_3_ID)\n    CONT_VOLUMES[CONT_3_ID] = containerGetItemsVolume(CONT_3_ID)\nend\nif CONT_4_ID then\n    CONT_NAMES[CONT_4_ID] = CONT_4_NAME\n    CONT_MASSES[CONT_4_ID] = containerGetItemsMass(CONT_4_ID)\n    CONT_VOLUMES[CONT_4_ID] = containerGetItemsVolume(CONT_4_ID)\nend\nif CONT_5_ID then\n    CONT_NAMES[CONT_5_ID] = CONT_5_NAME\n    CONT_MASSES[CONT_5_ID] = containerGetItemsMass(CONT_5_ID)\n    CONT_VOLUMES[CONT_5_ID] = containerGetItemsVolume(CONT_5_ID)\nend\nif CONT_6_ID then\n    CONT_NAMES[CONT_6_ID] = CONT_6_NAME\n    CONT_MASSES[CONT_6_ID] = containerGetItemsMass(CONT_6_ID)\n    CONT_VOLUMES[CONT_6_ID] = containerGetItemsVolume(CONT_6_ID)\nend\n\n-- Make sure the programming board has the neccesary peripherals\ntest(tableCount(CONT_IDS) >= 1, \"ERROR: At least one container must be connected!\")\ntest(tableCount(CONT_IDS) == containerCount(), \"ERROR: The number of container ids must match the number of containers!\")\ntest(screenCount() == 1, \"ERROR: One screen must be connected!\")\n\n-- Activate the attached screen\nscreenActivate(SCREEN_ID)\n-- Update the screen with the status of the connected containers\nupdateScreen()\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"-- Deactivate any attached screens\nscreenDeactivate(nil)\n","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"-- DUKit Version: 0.10.0\n\n--\n-- CONSOLE OUTPUT\n--\n\nQUIET=0     -- No console output\nERRORS=1    -- Only errors get output\nWARNINGS=2  -- Only errors and warnings get output\nDEBUG=3     -- Everything gets output\n\nCONSOLE_LOUDNESS=QUIET  --export: Console output filter level (QUIET, ERRORS, WARNINGS, DEBUG)\n\n-- Send message to console.\n-- msg: text to put to console\n-- lvl: the message level (ERRORS, WARNINGS, DEBUG)\nfunction out(msg, lvl)\n    local level = lvl or DEBUG\n    if level > QUIET and level <= CONSOLE_LOUDNESS then\n        system.print(msg)\n    end\nend\n\n-- Send a debug level message to console.\n-- msg: text to put to console\nfunction debug(msg)\n    out(msg, DEBUG)\nend\n\n-- Send an error level message to console.\n-- msg: text to put to console\n-- ex: true=raise error and then exit, false=send to console\nfunction err(msg, ex)\n    out(msg, ERRORS)\n    local ex = ex or true\n    if ex then\n        error(msg)\n        unit.exit()\n    end\nend\n\n-- Send a warning level message to console.\n-- msg: text to put to console\nfunction warn(msg)\n    out(msg, WARNINGS)\nend\n\n-- Send a debug level message to console and then test condition.\n-- condition: condition to test for True\n-- errmsg: message output to console on False test condition\n-- dbgmsg: debug level text to put to console before test to identify where the test is\nfunction test(condition, errmsg, dbgmsg)\n    if not condition then\n        if dbgmsg then\n            debug(dbgmsg)\n        end\n        local errmsg = errmsg or \"ERROR: Tested conditon was false!\"\n        err(errmsg, True)\n    end\nend\n\n--\n-- UTILITIES\n--\n\n-- Get the name of the player that activated this unit.\n-- returns the player name as a string\nfunction getPlayerName()\n    local player_id = unit.getMasterPlayerId()\n    local player_name = system.getPlayerName(player_id)\n    return player_name\nend\n\n-- Round a number to the specified decimal place.\n-- n: number to round\n-- places: the decimal places to round to\n-- returns the rounded number\nfunction round(n, places)\n    local mult = 10 ^ (places or 0)\n    if places ~= nil then\n        return math.floor(n * mult + 0.5) / mult\n    else\n        return math.floor((n * mult + 0.5) / mult)\n    end\nend\n\n-- Convert the specified value to a number.\n-- n: the value to try and convert\n-- returns the integer value\n-- An error will be raised if the value cannot be converted.\nfunction toInt(n)\n    local t = n\n    if t and type(t) == \"string\" then\n        t = tonumber(t)\n    end\n    if t and type(t) == \"number\" then\n        local i = math.floor(t)\n        if i < t then\n            i = i + 1\n        end\n        return i\n    end\n    err(\"ERROR: Unable to convert value '\"..n..\"' to integer!\")\nend\n\n-- Convert the specified value to a number.\n-- n: the value to try and convert\n-- returns the integer value\n-- An error will be raised if the value cannot be converted.\nfunction toNum(n)\n    local t = n\n    if t and type(t) == \"string\" then\n        t = tonumber(t)\n    end\n    if t and type(t) == \"number\" then\n        return t\n    end\n    err(\"ERROR: Unable to convert value '\"..n..\"' to number!\")\nend\n\n-- Convert the specified value to a string.\n-- n: the value to convert\n-- returns the string value\n-- An error will be raised if the value cannot be converted.\nfunction toStr(n)\n    local t = n\n    if t and type(t) == \"number\" then\n        t = tostring(t)\n    end\n    if t and type(t) == \"string\" then\n        return t\n    end\n    if t == nil then\n        return \"nil\"\n    end\n    err(\"ERROR: Unable to convert value '\"..n..\"' to string!\")\nend\n\n-- Select and use an element.\n-- unit_table: the table of elements to select from\n-- unit_id: id of the unit in the table to use (nil/\"nil\" will iterate all units in table)\n-- unit_op: the function to call with the selected unit\n-- data: data to be passed to the unit_op function\nfunction use(unit_table, unit_id, unit_op, data)\n    if unit_id == nil or unit_id == \"nil\" then\n        for id, u in pairs(unit_table) do\n            unit_op(id, u, data)\n        end\n        return\n    end\n    unit_id = toStr(unit_id)\n    unit_op(unit_id, unit_table[unit_id], data)\nend\n\n--\n-- COLOR UTILITIES\n--\n-- Utility functions and values to support color calculations.\n--\n\nRGB_BLACK   = {  0,  0,  0}\nRGB_WHITE   = {255,255,255}\nRGB_RED     = {255,  0,  0}\nRGB_YELLOW  = {255,255,  0}\nRGB_GREEN   = {  0,255,  0}\nRGB_CYAN    = {  0,255,255}\nRGB_BLUE    = {  0,  0,255}\nRGB_MAGENTA = {255,  0,255}\n\n-- Normalize a radian value to be in the range -pi to pi.\n-- r: the radian value to normalize\n-- returns the normalized radians value\nfunction normalizeRadians(r)\n    while r < -math.pi do\n        r = r + (2 * math.pi)\n    end\n    while r > math.pi do\n        r = r - (2 * math.pi)\n    end\n    return r\nend\n\n-- Normalize an RGB list.\n-- rgb: a list of values (i.e. { r, g, b })\n-- returns the normalized RGB list\nfunction normalizeRGB(rgb)\n    local r = math.max(math.min(math.floor(rgb[1]), 255), 0)\n    local g = math.max(math.min(math.floor(rgb[2]), 255), 0)\n    local b = math.max(math.min(math.floor(rgb[3]), 255), 0)\n    return {r, g, b}\nend\n\n-- Calculate the azimuth between the two colors (0=red, 90=blue).\n-- This function implements support for the RGB Color Space (\"Color Cube\")\n-- s_rgb: source RGB value\n-- t_rgb: target RGB value\n-- to_radians: [optional] true=result in radians (default: false=result in degrees)\n-- returns the value for the azimuth between the two colors\nfunction calcColorAzimuth(s_rgb, t_rgb, to_radians)\n    function atan_br(rgb)\n        local r = rgb[1] / 255\n        local b = rgb[3] / 255\n        if r == 0 then\n            if b == 0 then\n                return 0\n            end\n            return math.asin(b)\n        end\n        return math.atan(b/r)\n    end\n    local s_rgb = normalizeRGB(s_rgb)\n    local t_rgb = normalizeRGB(t_rgb)\n    local to_radians = to_radians or false\n    local s = atan_br(s_rgb)\n    local t = atan_br(t_rgb)\n    s = normalizeRadians(s)\n    t = normalizeRadians(t)\n    local a = t - s\n    if not to_radians then\n        a = math.floor(math.deg(a))\n    end\n    return a\nend\n\n-- Calculate the elevation between the two colors (0=no green, 90=green).\n-- This function implements support for the RGB Color Space (\"Color Cube\")\n-- s_rgb: source RGB value\n-- t_rgb: target RGB value\n-- to_radians: [optional] true=result in radians (default: false=result in degrees)\n-- returns the value for the elevation between the two colors\nfunction calcColorElevation(s_rgb, t_rgb, to_radians)\n    local s_rgb = normalizeRGB(s_rgb)\n    local t_rgb = normalizeRGB(t_rgb)\n    local to_radians = to_radians or false\n    local s = math.asin(s_rgb[2] / 255)\n    local t = math.asin(t_rgb[2] / 255)\n    local e = t - s\n    e = normalizeRadians(e)\n    if not to_radians then\n        e = math.floor(math.deg(e))\n    end\n    return e\nend\n\n-- Calculate the distance between the two colors.\n-- This function implements support for the RGB Color Space (\"Color Cube\")\n-- The distance is typically calculated from the origin color (i.e. RGB_BLACK)\n-- s_rgb: source RGB value\n-- t_rgb: target RGB value\n-- returns the value for the distance between the two colors\nfunction calcColorDistance(s_rgb, t_rgb)\n    local s_rgb = normalizeRGB(s_rgb)\n    local t_rgb = normalizeRGB(t_rgb)\n    local dr = t_rgb[1] - s_rgb[1]\n    local dg = t_rgb[2] - s_rgb[2]\n    local db = t_rgb[3] - s_rgb[3]\n    local d = math.sqrt((dr * dr) + (dg * dg) + (db * db))\n    return d\nend\n\n-- Calculate an RGB value from the azimuth, elevation, and distance components.\n-- This function implements support for the RGB Color Space (\"Color Cube\")\n-- azim: the azimuth value (0=red, 90=blue)\n-- elev: the elevation value (0=no green, 90=full green)\n-- dist: the distance value (0=black, 442=full intensity)\n-- is_radians: true=azim and eliv are in radians (default false=degrees)\n-- returns the calculated RGB list\nfunction calcRGBFromAED(azim, elev, dist, is_radians)\n    test((azim>=0) and (azim<=90), \"Azimuth must be between 0 and 90!\")\n    test((elev>=0) and (elev<=90), \"Elevation must be between 0 and 90!\")\n    local is_radians = is_radians or false\n    local a = azim\n    local e = elev\n    if not is_radians then\n        a = math.rad(a)\n        e = math.rad(e)\n    end\n    local r = dist * math.cos(a) * math.cos(e)\n    local b = dist * math.sin(a) * math.cos(e)\n    local g = dist * math.sin(e)\n    if not r then\n        r = 0\n    end\n    if not g then\n        g = 0\n    end\n    if not b then\n        b = 0\n    end\n    local rgb = normalizeRGB({r, g, b})\n    return rgb\nend\n\n--\n-- TABLE UTILITIES\n--\n-- Utility functions to support a table of strings, numbers or objects.\n--\n\n-- Get the number of items in the specified table.\n-- tbl: the table to get item count for\n-- returns the number of items in table\nfunction tableCount(tbl)\n    local len = 0\n    for k, v in pairs(tbl) do\n        len = len + 1\n    end\n    return len\nend\n\n-- Append an item to the end of a table (list mode).\n-- tbl: the table to modify\n-- itm: the item to append\nfunction tableAppendItem(tbl, itm)\n    table.insert(tbl, itm)\nend\n\n-- Add/Replace an item in a table (map mode).\n-- tbl: the table to modify\n-- key: the key for the entry\n-- itm: the value for the entry\nfunction tableAddItem(tbl, key, itm)\n    tbl[key] = itm\nend\n\n-- Insert an item in a table (list mode).\n-- tbl: the table to modify\n-- idx: the index for the entry\n-- itm: the value for the entry\nfunction tableInsertItem(tbl, idx, itm)\n    table.insert(tbl, itm, idx)\nend\n\n-- Find the first item in a table that matches the specified value and return its key.\n-- tbl: the table to search\n-- itm: the falue of the entry to look for\n-- returns the index of the first occurrence of itm (nil=not found)\nfunction tableFindItemKey(tbl, itm)\n    for k, t in pairs(tbl) do\n        if t == itm then\n            return k\n        end\n    end\n    return nil\nend\n\n-- Remove the first occurrence of an item from a table.\n-- tbl: the table to search\n-- itm: the value of the entry to remove\nfunction tableRemoveItem(tbl, itm)\n    local key = tableFindItemKey(tbl, itm)\n    if key then\n        tableRemoveItemAt(tbl, key)\n    end\nend\n\n-- Remove the item with the specified key/index from a table.\n-- tbl: the table to modify\n-- key: the key/index of the entry to remove\nfunction tableRemoveItemAt(tbl, key)\n    table.remove(tbl, key)\nend\n\n-- Get the item with the specified key/index from a table.\n-- tbl: the table to use\n-- key: the key/index of the entry\n-- default: the value to return if the key/index is not found (default is nil)\n-- returns the entry at the key/index or the specified default value\nfunction tableItemAt(tbl, key, default)\n    local t = tbl[key]\n    if t == nil then\n        t = default\n    end\n    return t\nend\n\n-- Iterate a table and process each key, value pair with the provided function.\n-- tbl: the table to iterate\n-- func: the function to call with the key and value\nfunction tableIterate(tbl, func)\n    if tbl and func then\n        for k, v in pairs(tbl) do\n            func(k, v)\n        end\n    end\nend\n\n-- Show the contents of a table.\n-- This uses the debug output function.\n-- tbl: the table to display\n-- indent_str: the indent sting to use for indenting on the console\n-- NOTE: system.print() appears to strip spaces from the start and end of string being printed.\nfunction tableShow(tbl, indent_str)\n    indent_str = indent_str or \"__\"\n    local level = 0\n    local tables = {}\n    function printLine(s)\n        local t = \"\"\n        for i = 0, level, 1 do\n            t = t..indent_str\n        end\n        t = t..s\n        debug(t)\n    end\n    function walkTable(tbl, s)\n        local i = tableFindItemKey(tables, tbl)\n        local s = s or \"\"\n        local n = i or tableCount(tables) + 1\n        s = s..\"<table-\"..n..\">[\"..tableCount(tbl)..\"]\"..\"{\"\n        printLine(s)\n        level = level + 1\n        if not i then\n            tableAppendItem(tables, tbl)\n            local quote_key = (tableType(tbl) == \"map\")\n            for k, v in pairs(tbl) do\n                s = \"\"\n                if quote_key then\n                    s = s..\"\\\"\"..k..\"\\\":\"\n                else\n                    s = s..k..\":\"\n                end\n                if v then\n                    t = type(v)\n                    u = s..\"<\"..t..\">\"\n                    if t == \"table\" then\n                        walkTable(v, s)\n                    elseif t == \"number\" then\n                        printLine(u..v)\n                    elseif t == \"boolean\" then\n                        if v then\n                            printLine(u..\"true\")\n                        else\n                            printLine(u..\"false\")\n                        end\n                    elseif t == \"function\" then\n                        printLine(u..\"()\")\n                    else\n                        printLine(u..\"\\\"\"..v..\"\\\"\")\n                    end\n                else\n                    printLine(s..\"\\\"nil\\\"\")\n                end\n            end\n        end\n        level = level - 1\n        printLine(\"}\")\n    end\n    walkTable(tbl)\nend\n\n-- Get the type of a table (i.e. \"list\" or \"map\").\n-- tbl: the table to identify.\n-- returns the table type\nfunction tableType(tbl)\n    for k, _ in pairs(tbl) do\n        if not (type(k) == \"number\") then\n            return \"map\"\n        end\n    end\n    return \"list\"\nend\n\n-- Convert a table to a JSON string.\n-- tbl: the table to convert\n-- returns a JSON string representation of the table\nfunction tableToJsonString(tbl)\n    local jsn = json.encode(tbl)\n    return jsn\nend\n\n-- Convert a JSON string to a table.\n-- jsn: the JSON string to convert\n-- returns a table containing the values from the JSON string\nfunction jsonStringToTable(jsn)\n    local tbl = json.decode(jsn)\n    return tbl\nend\n\n--\n-- SLOT DETECTION\n--\n\n-- Auto detect the units that are plugged into the control unit slots.\nfunction autoDetectSlots()\n    local auto_slots = unit[\"auto_detect_slots\"]\n    if not auto_slots then\n        auto_slots = {}\n        unit[\"auto_detect_slots\"] = auto_slots\n        auto_slots[\"core\"] = {}\n        auto_slots[\"container\"] = {}\n        auto_slots[\"databank\"] = {}\n        auto_slots[\"door\"] = {}\n        auto_slots[\"industry\"] = {}\n        auto_slots[\"light\"] = {}\n        auto_slots[\"screen\"] = {}\n        auto_slots[\"sign\"] = {}\n        local slot_name, slot = nil, nil\n        for slot_name, slot in pairs(unit) do\n            if type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getElementClass then\n                local element_class = slot.getElementClass():lower()\n                local id = toStr(slot.getId())\n                local json_data = slot.getData()\n                if element_class == \"coreunitstatic\" then\n                    if tableCount(auto_slots[\"core\"]) == 1 then\n                        error(\"ERROR: Only one static core supported at this time!\")\n                    end\n                    tableAddItem(auto_slots[\"core\"], id, slot)\n                    debug(\"Found static core (id:\"..id..\")\")\n                elseif element_class == \"databankunit\" then\n                    tableAddItem(auto_slots[\"databank\"], id, slot)\n                    debug(\"Found databank (id:\"..id..\")\")\n                elseif element_class == \"doorunit\" then\n                    tableAddItem(auto_slots[\"door\"], id, slot)\n                    debug(\"Found door (id:\"..id..\")\")\n                elseif element_class == \"industry1\" or element_class == \"industry2\" or element_class == \"industry3\" or element_class == \"industry4\" then\n                    tableAddItem(auto_slots[\"industry\"], id, slot)\n                    debug(\"Found industry (id:\"..id..\")\")\n                elseif element_class == \"itemcontainer\" then\n                    tableAddItem(auto_slots[\"container\"], id, slot)\n                    debug(\"Found container (id:\"..id..\")\")\n                elseif element_class == \"lightunit\" then\n                    tableAddItem(auto_slots[\"light\"], id, slot)\n                    debug(\"Found light (id:\"..id..\")\")\n                elseif element_class == \"screenunit\" then\n                    tableAddItem(auto_slots[\"screen\"], id, slot)\n                    debug(\"Found screen (id:\"..id..\")\")\n                elseif element_class == \"screensignunit\" then\n                    tableAddItem(auto_slots[\"sign\"], id, slot)\n                    debug(\"Found sign (id:\"..id..\")\")\n                else\n                    debug(\"slot class '\"..element_class..\"' of type '\"..type(slot)..\"' in \"..slot_name, INFO)\n                    debug(\"  slot ID = \"..id)\n                    debug(\"  slot data = \"..json_data)\n                end\n            end\n        end\n    end\nend\n\n--\n-- CONTAINER UNIT\n--\n\n-- Get the number of containers.\nfunction containerCount()\n    debug(\"Getting the count of containers\")\n    return tableCount(unit[\"auto_detect_slots\"][\"container\"])\nend\n\n-- Get the mass of the items in the container (in kg).\n-- id: the ID of the container\n-- Returns the mass of the contents\nfunction containerGetItemsMass(id)\n    id = toStr(id)\n    debug(\"Getting mass of items in container [\"..id..\"]\")\n    local m = unit[\"auto_detect_slots\"][\"container\"][id].getItemsMass()\n    debug(m)\n    return m\nend\n\n-- Get the volume of the items in the container (in L).\n-- id: the id of the container\n-- Returns the volume of the contents\nfunction containerGetItemsVolume(id)\n    id = toStr(id)\n    debug(\"Getting volume of items in container [\"..id..\"]\")\n    local v = unit[\"auto_detect_slots\"][\"container\"][id].getItemsVolume()\n    debug(v)\n    return v\nend\n\n-- Get the maximum volume the container can hold (in L).\n-- id: the id of the container\n-- Return the container maximum volume\nfunction containerGetMaxVolume(id)\n    id = toStr(id)\n    debug(\"Getting maximum volume of container [\"..id..\"]\")\n    local v = unit[\"auto_detect_slots\"][\"container\"][id].getMaxVolume()\n    debug(v)\n    return v\nend\n\n-- Get the mass of the empty container (in kg).\n-- id: the id of the container\n-- Return the mass of the container when empty\nfunction containerGetSelfMass(id)\n    id = toStr(id)\n    debug(\"Getting mass of empty container [\"..id..\"]\")\n    local m = unit[\"auto_detect_slots\"][\"container\"][id].getSelfMass()\n    debug(m)\n    return m\nend\n\nfunction containerIterate(func)\n    debug(\"Iterating container table\")\n    tableIterate(unit[\"auto_detect_slots\"][\"container\"], func)\nend\n\n--\n-- DOOR UNIT\n--\n\n-- Get the number of doors.\nfunction doorCount()\n    debug(\"Getting the count of doors\")\n    return tableCount(unit[\"auto_detect_slots\"][\"door\"])\nend\n\n-- Close a door.\n-- id: door id (nil=all)\nfunction doorClose(id)\n    function op(id, unit, data)\n        debug(\"Closing door [\"..id..\"]\")\n        unit.deactivate()\n    end\n    use(unit[\"auto_detect_slots\"][\"door\"], id, op, nil)\nend\n\n-- Open a door.\n-- id: door id (nil=all)\nfunction doorOpen(id)\n    function op(id, unit, data)\n        debug(\"Opening door [\"..id..\"]\")\n        unit.activate()\n    end\n    use(unit[\"auto_detect_slots\"][\"door\"], id, op, nil)\nend\n\n-- Get the state of a door.\n-- id: door id\n-- return the door state (1=open, 0=closed)\nfunction doorGetState(id)\n    id = toStr(id)\n    debug(\"Getting state for door [\"..id..\"]\")\n    local st = unit[\"auto_detect_slots\"][\"door\"][id].getState()\n    return st\nend\n\n-- Toggle the state of a door.\n-- id: door id (nil=all)\nfunction doorToggle(id)\n    function op(id, unit, data)\n        debug(\"Toggling state for door [\"..id..\"]\")\n        unit.toggle()\n    end\n    use(unit[\"auto_detect_slots\"][\"door\"], id, op, nil)\nend\n\nfunction doorIterate(func)\n    debug(\"Iterating door table\")\n    tableIterate(unit[\"auto_detect_slots\"][\"door\"], func)\nend\n\n--\n-- LIGHT UNIT\n--\n\n-- Get the number of lights.\nfunction lightCount()\n    debug(\"Getting count of lights\")\n    return tableCount(unit[\"auto_detect_slots\"][\"light\"])\nend\n\n-- Activate a light.\n-- id: light id (nil=all)\nfunction lightActivate(id)\n    function op(id, unit, data)\n        debug(\"Activating light [\"..id..\"]\")\n        unit.activate()\n    end\n    use(unit[\"auto_detect_slots\"][\"light\"], id, op, nil)\nend\n\n-- Deactivate a light.\n-- id: light id (nil=all)\nfunction lightDeactivate(id)\n    function op(id, unit, data)\n        debug(\"Deactivating light [\"..id..\"]\")\n        unit.deactivate()\n    end\n    use(unit[\"auto_detect_slots\"][\"light\"], id, op, nil)\nend\n\n-- Get the perceived brightness of a light.\n-- id: light id\n-- returns the brightness of the light\nfunction lightGetBrightness(id)\n    id = toStr(id)\n    debug(\"Getting brightness for light [\"..id..\"]\")\n    local rgb = lightGetRGBColor(id)\n    local br = math.sqrt((0.299 * rgb[1] * rgb[1]) + (0.587 * rgb[2] * rgb[2]) + (0.114 * rgb[3] * rgb[3]))\n    return br\nend\n\n-- Get the RGB color of a light.\n-- id: light id\n-- returns the RGB color of the light\nfunction lightGetRGBColor(id)\n    id = toStr(id)\n    debug(\"Getting RGB for light [\"..id..\"]\")\n    local rgb = unit[\"auto_detect_slots\"][\"light\"][id].getRGBColor()\n    return rgb\nend\n\n-- Get the state of a light.\n-- id: light id\n-- returns the state of the light (1=on, 0=off)\nfunction lightGetState(id)\n    id = toStr(id)\n    debug(\"Getting state for light [\"..id..\"]\")\n    local st = unit[\"auto_detect_slots\"][\"light\"][id].getState()\n    return st\nend\n\n-- Set the RGB color of a light.\n-- id: light id (nil=all)\n-- rgb: the RGB color to set\nfunction lightSetRGBColor(id, rgb)\n    function op(id, unit, rgb)\n        debug(\"Setting RGB for light [\"..id..\"]\")\n        unit.setRGBColor(rgb[1],rgb[2],rgb[3])\n    end\n    use(unit[\"auto_detect_slots\"][\"light\"], id, op, rgb)\nend\n\n-- Toggle the state of a light.\n-- id: light id (nil=all)\nfunction lightToggle(id)\n    function op(id, unit, data)\n        debug(\"Toggling state for light [\"..id..\"]\")\n        unit.toggle()\n    end\n    use(unit[\"auto_detect_slots\"][\"light\"], id, op, nil)\nend\n\nfunction lightIterate(func)\n    debug(\"Iterating light table\")\n    tableIterate(unit[\"auto_detect_slots\"][\"light\"], func)\nend\n\n--\n-- SCREEN UNIT\n--\n\n-- Get the number of screens.\nfunction screenCount()\n    debug(\"Getting screen count\")\n    return tableCount(unit[\"auto_detect_slots\"][\"screen\"])\nend\n\n-- Activate a screen.\n-- id: screen index (nil=all)\nfunction screenActivate(id)\n    function op(id, unit, data)\n        debug(\"Activating screen [\"..id..\"]\")\n        unit.activate()\n    end\n    use(unit[\"auto_detect_slots\"][\"screen\"], id, op, nil)\nend\n\n-- Deactivate a screen.\n-- id: screen id (nil=all)\nfunction screenDeactivate(id)\n    function op(id, unit, data)\n        debug(\"Deactivating screen [\"..id..\"]\")\n        unit.deactivate()\n    end\n    use(unit[\"auto_detect_slots\"][\"screen\"], id, op, nil)\nend\n\n-- Clear a screen.\n-- id: screen id (nil=all)\nfunction screenClear(id)\n    function op(id, unit, data)\n        debug(\"Clearing screen [\"..id..\"]\")\n        unit.clear()\n    end\n    use(unit[\"auto_detect_slots\"][\"screen\"], id, op, nil)\nend\n\n-- Set a screen with HTML.\n-- id: screen id (nil=all)\n-- html: the HTML to set\nfunction screenSetHTML(id, html)\n    function op(id, unit, html)\n        debug(\"Setting HTML on screen [\"..id..\"]\")\n        unit.setHTML(html)\n    end\n    use(unit[\"auto_detect_slots\"][\"screen\"], id, op, html)\nend\n\n-- Set a screen with SVG.\n-- id: screen id (nil=all)\n-- svg: the SVG to set\nfunction screenSetSVG(id, svg)\n    function op(id, unit, svg)\n        debug(\"Setting SVG on screen [\"..id..\"]\")\n        unit.setSVG(svg)\n    end\n    use(unit[\"auto_detect_slots\"][\"screen\"], id, op, svg)\nend\n\n-- Set a screen with text.\n-- id: screen id (nil=all)\n-- text: the text to set\nfunction screenSetText(id, text)\n    function op(id, unit, text)\n        debug(\"Setting TEXT on screen [\"..id..\"]\")\n        unit.setCenteredText(text)\n    end\n    use(unit[\"auto_detect_slots\"][\"screen\"], id, op, text)\nend\n\nfunction screenIterate(func)\n    debug(\"Iterating screen table\")\n    tableIterate(unit[\"auto_detect_slots\"][\"screen\"], func)\nend\n\n--\n-- SIGN UNIT\n--\n\n-- Get the number of signs.\nfunction signCount()\n    debug(\"Getting count of signs.\")\n    return tableCount(unit[\"auto_detect_slots\"][\"sign\"])\nend\n\n-- Activate a sign.\n-- id: sign id (nil=all)\nfunction signActivate(id)\n    function op(id, unit, data)\n        debug(\"Activating sign [\"..id..\"]\")\n        unit.activate()\n    end\n    use(unit[\"auto_detect_slots\"][\"sign\"], id, op, nil)\nend\n\n-- Deactivate a sign.\n-- id: sign id (nil=all)\nfunction signDeactivate(id)\n    function op(id, unit, data)\n        debug(\"Deactivating sign [\"..id..\"]\")\n        unit.deactivate()\n    end\n    use(unit[\"auto_detect_slots\"][\"sign\"], id, op, nil)\nend\n\n-- Clear a sign.\n-- id: sign id (nil=all)\nfunction signClear(id)\n    function op(id, unit, data)\n        debug(\"Clearing sign [\"..id..\"]\")\n        unit.clear()\n    end\n    use(unit[\"auto_detect_slots\"][\"sign\"], id, op, nil)\nend\n\n-- Set a sign with HTML.\n-- id: sign id (nil=all)\n-- html: the HTML to set\nfunction signSetHTML(id, html)\n    function op(id, unit, html)\n        debug(\"Setting HTML on sign [\"..id..\"]\")\n        unit.setHTML(html)\n    end\n    use(unit[\"auto_detect_slots\"][\"sign\"], id, op, html)\nend\n\n-- Set a sign with SVG.\n-- id: sign id (nil=all)\n-- svg: the SVG to set\nfunction signSetSVG(id, svg)\n    function op(id, unit, svg)\n        debug(\"Setting SVG on sign [\"..id..\"]\")\n        unit.setSVG(svg)\n    end\n    use(unit[\"auto_detect_slots\"][\"sign\"], id, op, svg)\nend\n\n-- Set a sign with text.\n-- id: sign id (nil=all)\n-- text: the text to set\nfunction signSetText(id, text)\n    function op(id, unit, text)\n        debug(\"Setting TEXT on sign [\"..id..\"]\")\n        unit.setCenteredText(text)\n    end\n    use(unit[\"auto_detect_slots\"][\"sign\"], id, op, text)\nend\n\nfunction signIterate(func)\n    debug(\"Iterating sign table\")\n    tableIterate(unit[\"auto_detect_slots\"][\"sign\"], func)\nend\n","filter":{"args":[],"signature":"start()","slotKey":"-2"},"key":"2"}],"methods":[],"events":[]}
